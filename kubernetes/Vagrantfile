###########################
###### UTIL METHODS #######
###########################

# Extracts the ip of a given node by its role name
def get_ip_by_role(nodes, role)
  node = nodes.find { |name, ndata|
    ndata[:role] == role
  }

  return node.last()[:ip]
end

# Extracts master node ip from the list of nodes
def get_master_ip(nodes)
  return get_ip_by_role(nodes, "master")
end

# Extracts nfs server ip
def get_nfs_ip(nodes)
  return get_ip_by_role(nodes, "nfs")
end

# Returns true if there is a node with :role => 'nfs'
def is_nfs_active(nodes)
  is_there_nfs = nodes
            .select { |name, ndata| ndata[:role] == 'nfs'}
            .size() > 0

  return is_there_nfs ? "yes" : "no"
end

###########################
####### VARIABLES #########
###########################

# nodes to be built
nodes = {
  "baker": {
    ip: "192.168.250.104",
    role: 'nfs',
    memory: "1024",
    disk: "10GB"
  },
  "sherlock": {
    ip: "192.168.250.102",
    role: 'master',
    memory: "4096",
    disk: "10GB"
  },
  "watson": {
    ip: "192.168.250.103",
    role: 'slave',
    memory: "4096",
    disk: "10GB"
  }
}

# cluster default gateway ip
gateway_ip = "192.168.250.1"

# metallb network mask to get ips from the pool
metallb_netmask = "192.168.250.112/29"

# master_ip
master_ip = get_master_ip(nodes)

# mount nfs
nfs_active = is_nfs_active(nodes)
nfs_ip = get_nfs_ip(nodes)
nfs_netmask = "192.168.250.0/24"

# shell provisioning
del_default_gateway = "route del default gw 0"
add_gateway_command = "route add default gw #{ gateway_ip }"

###########################
#### VAGRANT CONFIGURE ####
###########################

Vagrant.configure("2") do |config|
  # loop through all configured nodes
  nodes.each { |name, ndata|
    config.vm.define name do |node|

      node.vm.box = "ubuntu/xenial64"
      node.disksize.size = ndata[:disk]

      node.vm.hostname = name
      node.vm.network "public_network", ip: ndata[:ip]
      node.vm.provision "shell", inline: del_default_gateway
      node.vm.provision "shell", inline: add_gateway_command
      node.vm.provider "virtualbox" do |vb|
        vb.memory = ndata[:memory]
      end

      node.vm.provision "ansible" do |ansible|
        ansible.playbook = "ansible/playbook-#{ ndata[:role] }.yml"
        ansible.extra_vars = {
          master_ip: master_ip,
          metallb_addresses: metallb_netmask,
          nfs_active: nfs_active,
          nfs_netmask: nfs_netmask,
          nfs_ip: nfs_ip
        }
      end

    end
  }
end
